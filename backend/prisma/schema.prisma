datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Category {
  id          String @id @unique @default(uuid())
  name        String
  description String

  products Product[]

  // Relation to parent category
  parent   Category? @relation("ChildCategories", fields: [parentId], references: [id])
  parentId String?

  // Relation to subcategories
  subCategories Category[] @relation("ChildCategories")

  history String[]

  isArchived Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String @unique @default(uuid())
  name        String
  description String

  sellingPrice Decimal
  actualPrice  Decimal

  Tags String[]

  bannerImage String
  images      String[]

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  history String[]

  isArchived Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id String @id @default(uuid())

  UserName      String?
  email         String?   @unique
  emailVerified DateTime?

  image String?

  password String?

  // Tasks that this user is a member of
  projects Project[] @relation("ProjectMember")

  // Tasks that this user has created
  projectsManager Project[] @relation("ProjectManager")

  // Tasks that this user is a member of
  tasks       Task[] @relation("TaskMembers")
  // Tasks that this user has created
  taskCreated Task[] @relation("TaskOwner")

  history String[]

  isArchived Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id String @id @unique @default(uuid())

  name        String
  description String

  client     String[]
  technology String[]
  tasks      Task[]

  manager   User   @relation("ProjectManager", fields: [managerId], references: [id])
  managerId String

  // total number of participants
  participants User[] @relation("ProjectMember")

  history    String[]
  isArchived Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  PENDING
  TODO
  INPROGRESS
  COMPLETED
}

model Task {
  id String @id @unique @default(uuid())

  name        String
  description String
  status      Status @default(PENDING)

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  // The owner of the task
  Owner   User   @relation("TaskOwner", fields: [ownerId], references: [id])
  ownerId String

  // Members associated with the task
  members User[] @relation("TaskMembers")

  documents String[]
  history   String[]

  isArchived Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
